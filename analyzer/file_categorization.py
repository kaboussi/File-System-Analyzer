from collections import defaultdict
from pathlib import Path
from typing import List, Union

import bitmath
from pydantic import BaseModel
from rich import box, print
from rich.table import Table


class FileInfo(BaseModel):
    filename: Union[Path, str]
    extension: str
    category: str
    size: int


class CategoryInfo(BaseModel):
    name: str
    number_of_files: int
    total_size: int
    files: List[FileInfo]


"""
this is an example of CategoryInfo
[
    (
        'Text',              <--- key: category
        CategoryInfo(        <--- value: CategoryInfo
            name='Other',
            number_of_files=1,
            total_size=0,
            files=[FileInfo(filename=PosixPath('/tmp.txt'), extension='.txt', category='Text', size=0)]
        )
    ),
    (
        'Video',
        CategoryInfo(
            name='Other',
            number_of_files=1,
            total_size=0,
            files=[FileInfo(filename=PosixPath('/video.mp4'), extension='.mp4', category='Video', size=0)]
        )
    ),
    (
        'NoExtension',
        CategoryInfo(
            name='Other',
            number_of_files=1,
            total_size=0,
            files=[FileInfo(filename=PosixPath('/Dockerfile'), extension='', category='NoExtension', size=0)]
        )
    )
]
"""


category_mapping = {
    "NoExtension": {""},
    "Text": {
        ".doc",
        ".docx",
        ".docm",
        ".odt",
        ".pdf",
        ".txt",
        ".rtf",
        ".pages",
        ".pfb",
        ".mobi",
        ".chm",
        ".tex",
        ".bib",
        ".dvi",
        ".abw",
        ".text",
        ".epub",
        ".nfo",
        ".log",
        ".log1",
        ".log2",
        ".wks",
        ".wps",
        ".wpd",
        ".emlx",
        ".utf8",
        ".ichat",
        ".asc",
        ".ott",
        ".fra",
        ".opf",
    },
    "Image": {
        ".img",
        ".jpg",
        ".jpeg",
        ".png",
        ".png0",
        ".ai",
        ".cr2",
        ".ico",
        ".icon",
        ".jfif",
        ".tiff",
        ".tif",
        ".gif",
        ".bmp",
        ".odg",
        ".djvu",
        ".ai",
        ".fla",
        ".pic",
        ".ps",
        ".psb",
        ".svg",
        ".dds",
        ".hdr",
        ".ithmb",
        ".rds",
        ".heic",
        ".aae",
        ".apalbum",
        ".apfolder",
        ".xmp",
        ".dng",
        ".px",
        ".catalog",
        ".ita",
        ".photoscachefile",
        ".visual",
        ".shape",
        ".appicon",
        ".icns",
    },
    "Development": {
        ".py",
        ".h",
        ".m",
        ".jar",
        ".cs",
        ".c",
        ".c#",
        ".cpp",
        ".11",
        ".fish",
        ".ps1",
        ".csh",
        ".pyi",
        ".pl",
        ".go",
        ".rs",
        ".tmpl",
        ".html_t",
        ".css_t",
        ".js_t",
        ".bat_t",
        ".tex_t",
        ".new_t",
        ".py_t",
        ".c++",
        ".class",
        ".java",
        ".php",
        ".phps",
        ".php5",
        ".htm",
        ".html",
        ".css",
        ".3mf",
        ".o",
        ".obj",
        ".blg",
        ".bbl",
        ".j",
        ".jav",
        ".bash",
        ".bsh",
        ".sh",
        ".rb",
        ".vb",
        ".vbscript",
        ".vbs",
        ".vhd",
        ".vmwarevm",
        ".js",
        ".jsp",
        ".xhtml",
        ".md5",
        ".nib",
        ".strings",
        ".frm",
        ".myd",
        ".myi",
        ".props",
        ".vcxproj",
        ".vs",
        ".lst",
        ".sol",
        ".vbox",
        ".vbox-prev",
        ".pch",
        ".pdb",
        ".lib",
        ".nas",
        ".assets",
        ".sql",
        ".sqlite-wal",
        ".rss",
        ".swift",
        ".xsl",
        ".manifest",
        ".up_meta",
        ".down_meta",
        ".woff",
        ".dist",
        ".sublime-snippet",
        ".d",
        ".ashx",
        ".tpm",
        ".dsw",
        ".hpp",
        ".tga",
        ".kf",
        ".rq",
        ".rdf",
        ".ttl",
        ".pyc",
        ".pyo",
        ".s",
        ".lua",
        ".vim",
        ".p",
        ".dashtoc",
    },
    "Spreadsheet": {
        ".csv",
        ".odf",
        ".ods",
        ".xlr",
        ".xls",
        ".xlsx",
        ".numbers",
        ".xlk",
    },
    "System": {
        ".bif",
        ".shs",
        ".ds_store",
        ".gadget",
        ".so",
        ".idx",
        ".ipmeta",
        ".sys",
        ".dll",
        ".dylib",
        ".etl",
        ".regtrans-ms",
        ".key",
        ".lock",
        ".man",
        ".inf",
        ".x86",
        ".dev",
        ".config",
        ".cfg",
        ".cpl",
        ".cur",
        ".dmp",
        ".drv",
        ".mot",
        ".ko",
        ".supported",
        ".pxe",
        ".cgz",
        ".0",
        ".file",
        ".install",
        ".desktop",
        ".ttc",
        ".ttf",
        ".fnt",
        ".fon",
        ".otf",
        ".download",
        ".acsm",
        ".ini",
        ".opt",
        ".dat",
        ".sav",
        ".save",
        ".aux",
        ".raw",
        ".temp",
        ".tmp",
        ".1",
        ".2",
        ".3",
        ".4",
        ".5",
        ".6",
        ".7",
        ".8",
        ".9",
        ".10",
        ".cache",
        ".ipsw",
        ".stt",
        ".part",
        ".appcache",
        ".sbstore",
        ".gpd",
        ".sqm",
        ".emf",
        ".jrs",
        ".pri",
        ".vcrd",
        ".mui",
        ".localstorage",
        ".localstorage-journal",
        ".data",
        ".crash",
        ".webhistory",
        ".settingcontent-ms",
        ".itc",
        ".atx",
        ".apversion",
        ".apmaster",
        ".apdetected",
        ".pos",
        ".glk",
        ".blob",
        ".cat",
        ".sns",
        ".adv",
        ".asd",
        ".lrprev",
        ".csl",
        ".rdl",
        ".sthlp",
        ".tm2",
        ".mcdb",
        ".fragment",
        ".nif",
        ".blockdata",
        ".continuousdata",
        ".upk",
        ".znb",
        ".xnb",
        ".idrc",
        ".model",
        ".primitives",
        ".ovl",
        ".sid",
        ".stringtable",
        ".foliage",
        ".civ4savedgame",
        ".cgs",
        ".thewitchersave",
        ".pssg",
        ".pac",
        ".unity3d",
        ".ifi",
        ".vmt",
        ".vtf",
        ".pfm",
        ".deu",
        ".map",
        ".simss",
    },
    "Executable": {
        ".exe",
        ".bat",
        ".dmg",
        ".msi",
        ".bin",
        ".pak",
        ".app",
        ".com",
        ".application",
    },
    "Archive": {
        ".zip",
        ".gz",
        ".rar",
        ".cab",
        ".iso",
        ".tar",
        ".lzma",
        ".bz2",
        ".pkg",
        ".xz",
        ".7z",
        ".vdi",
        ".ova",
        ".rpm",
        ".z",
        ".tgz",
        ".deb",
        ".vcd",
        ".ost",
        ".vmdk",
        ".001",
        ".002",
        ".003",
        ".004",
        ".005",
        ".006",
        ".007",
        ".008",
        ".009",
        ".arj",
        ".package",
        ".ims",
    },
    "Backup": {".bak", ".backup", ".back"},
    "Audio": {
        ".mp3",
        ".m3u",
        ".m4a",
        ".wav",
        ".ogg",
        ".flac",
        ".midi",
        ".oct",
        ".aac",
        ".aiff",
        ".aif",
        ".wma",
        ".pcm",
        ".cda",
        ".mid",
        ".mpa",
        ".ens",
        ".adg",
        ".dmpatch",
        ".sngw",
        ".seq",
        ".wem",
        ".mtp",
        ".l6t",
        ".lng",
        ".adx",
        ".link",
    },
    "Database": {
        ".accdb",
        ".accde",
        ".mdb",
        ".mde",
        ".odb",
        ".db",
        ".gdbtable",
        ".gdbtablx",
        ".gdbindexes",
        ".sqlite",
        ".enz",
        ".enl",
        ".sdf",
        ".hdb",
        ".cdb",
        ".gdb",
        ".cif",
        ".xyz",
        ".mat",
        ".bgl",
        ".r",
        ".exp",
        ".asy",
        ".info",
        ".meta",
        ".adf",
        ".appinfo",
        ".xg0",
        ".yg0",
    },
    "Presentation": {".ppt", ".pptx", ".pps", ".ppsx", ".odp", ".key"},
    "Data": {
        ".json",
        ".jsonp",
        ".yaml",
        ".yml",
        ".toml",
        ".xml",
        ".proto",
        ".msgpack",
        ".avro",
        ".cbor",
        ".feather",
        ".csv",
        ".ini",
        ".bson",
        ".xdr",
    },
    "Video": {
        ".mpg",
        ".mpeg",
        ".avi",
        ".mp4",
        ".flv",
        ".h264",
        ".mov",
        ".mk4",
        ".swf",
        ".wmv",
        ".mkv",
        ".plist",
        ".m4v",
        ".trec",
        ".3g2",
        ".3gp",
        ".rm",
        ".vob",
    },
    "Bookmark": {".torrent", ".url"},
    "PIM": {
        ".dbx",
        ".eml",
        ".msg",
        ".ics",
        ".pst",
        ".vcf",
        ".gdb",
        ".ofx",
        ".qif",
        ".rem",
        ".tax",
        ".qbmb",
        ".one",
        ".note",
        ".olk14message",
        ".olk14msgattach",
        ".olk14folder",
        ".olkmsgsource",
        ".olk14msgsource",
        ".olk15message",
        ".olk15messageattachment",
        ".olk14event",
        ".olk15msgattachment",
        ".olk15msgsource",
        ".vcs",
        ".hbk",
    },
    "ConfigFiles": {
        ".conf",
        ".sample",
        ".npmignore",
        ".mod",
        ".rockspec",
        ".gemspec",
        ".rst",
        ".qhcp",
        ".qhp",
        ".hhc",
        ".hhp",
        ".hhp",
        ".stp",
    },
    "Documentation": {".md", ".rst", ".markdown-it", ".rst_t"},
    "Localization": {".pot", ".po", ".mo"},
    "BinaryArchive": {".pack", ".whl"},
    "DataConfiguration": {".typed", ".json_t"},
    "WebMarkup": {".html_t", ".css_t", ".js_t"},
    "TextFormatting": {".sty", ".ist", ".cls"},
    "TeXLaTeX": {".tex_t"},
    "EbookFormats": {".xdy", ".ncx_t", ".opf_t"},
    "Shortcut": {".lnk"},
}


class FileCategorization:

    def __init__(self) -> None:
        self.data_files: List[FileInfo] = []
        self.category_data = defaultdict(
            lambda: CategoryInfo(
                name="Other", number_of_files=0, total_size=0, files=[]
            )
        )

    def add_file(self, filename: Path) -> None:
        """
        Add a file to the categorized files.

        Parameters:
        - filename (Path): Path to the file.
        """

        extension = filename.suffix
        category = next(
            (
                category
                for category, extensions in category_mapping.items()
                if extension.lower() in extensions
            ),
            "Other",
        )
        size = filename.stat().st_size

        self.category_data[category].number_of_files += 1
        self.category_data[category].total_size += size
        self.category_data[category].files.append(
            FileInfo(
                filename=filename, extension=extension, category=category, size=size
            )
        )

    def display_summary(self) -> None:
        """
        Display the categorized file summary
        """
        table: Table = Table(
            title="File Summary",
            box=box.HEAVY_EDGE,
            show_lines=True,
        )

        table.add_column("Category", justify="center", vertical="middle")
        table.add_column("File Extension", justify="center", vertical="middle")
        table.add_column("Number of files", justify="center", vertical="middle")
        table.add_column("Size", justify="center", vertical="middle")

        bitmath.format_string = "{value:.2f} {unit}"

        for category, category_info in self.category_data.items():
            table.add_row(
                category,
                "\n".join(
                    set(file_info.extension for file_info in category_info.files)
                ),
                str(category_info.number_of_files),
                str(bitmath.Byte(category_info.total_size).best_prefix(bitmath.SI)),
            )
        if not table.rows:
            print("[magneta]No files to categorize.[/magneta]")
            return

        print(table)
